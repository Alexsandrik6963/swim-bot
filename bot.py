import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from dotenv import load_dotenv
from datetime import datetime, timedelta
import pytz
from openpyxl import Workbook, load_workbook

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 191598071))  # —Ç–≤–æ–π ID

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤–∞
moscow_tz = pytz.timezone("Europe/Moscow")

# –§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–µ–π
EXCEL_FILE = "bookings.xlsx"

# --- –°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ê–ü–ò–°–ï–ô –í EXCEL ---
def save_booking(date_str, time_str, user, status="–ó–∞–ø–∏—Å–∞–Ω"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ Excel"""
    if not os.path.exists(EXCEL_FILE):
        wb = Workbook()
        ws = wb.active
        ws.append(["–î–∞—Ç–∞", "–í—Ä–µ–º—è", "UserID", "Username", "–°—Ç–∞—Ç—É—Å"])
        wb.save(EXCEL_FILE)

    wb = load_workbook(EXCEL_FILE)
    ws = wb.active
    ws.append([
        date_str,
        time_str,
        user.id,
        user.username or "",
        status
    ])
    wb.save(EXCEL_FILE)


# –†–∞–±–æ—á–∏–µ –¥–Ω–∏ (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ... 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
WORK_DAYS = [0, 1, 2, 3, 5]  # –ü–Ω-–ß—Ç –∏ –°–±

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="choose_day")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏", callback_data="cancel")
    return kb.as_markup()

def days_keyboard():
    kb = InlineKeyboardBuilder()
    today = datetime.now(moscow_tz).date()
    for i in range(14):  # –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏
        d = today + timedelta(days=i)
        if d.weekday() in WORK_DAYS:
            kb.button(text=d.strftime("%a %d.%m"), callback_data=f"day_{d}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_menu")
    return kb.adjust(2).as_markup()

def times_keyboard(selected_date):
    kb = InlineKeyboardBuilder()
    date_obj = datetime.strptime(selected_date, "%Y-%m-%d").date()
    weekday = date_obj.weekday()

    slots = []

    if weekday in [0, 1, 2, 3]:  # –ü–Ω‚Äì–ß—Ç
        slots = [
            "07:00","08:00","09:00","10:00","11:00","12:00",
            "13:00","14:00","15:00",
            "18:30","19:00","20:00","21:00"
        ]
    elif weekday == 5:  # –°—É–±–±–æ—Ç–∞
        slots = [
            "07:00","08:00","09:00","10:00","11:00","12:00",
            "13:00","14:00","15:00"
        ]

    for s in slots:
        kb.button(text=s, callback_data=f"time_{selected_date}_{s}")

    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="choose_day")
    return kb.adjust(4).as_markup()

# --- –•–ï–ù–î–õ–ï–†–´ ---

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–ª–∞–≤–∞–Ω–∏—é.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.callback_query(F.data == "back_menu")
async def back_menu(cb: CallbackQuery):
    await cb.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await cb.answer()

@dp.callback_query(F.data == "choose_day")
async def choose_day(cb: CallbackQuery):
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=days_keyboard())
    await cb.answer()

@dp.callback_query(F.data.startswith("day_"))
async def choose_time(cb: CallbackQuery):
    date_str = cb.data.split("_")[1]
    await cb.message.edit_text(
        f"–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è <b>{date_str}</b>:",
        reply_markup=times_keyboard(date_str)
    )
    await cb.answer()

@dp.callback_query(F.data.startswith("time_"))
async def confirm_booking(cb: CallbackQuery):
    _, date_str, time_str = cb.data.split("_")
    booking_text = f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüìÖ –î–∞—Ç–∞: {date_str}\n‚è∞ –í—Ä–µ–º—è: {time_str}"

    await cb.message.edit_text(booking_text, reply_markup=main_menu())
    await cb.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ Excel
    save_booking(date_str, time_str, cb.from_user, status="–ó–∞–ø–∏—Å–∞–Ω")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –≤ –ª–∏—á–∫—É
    try:
        await bot.send_message(
            ADMIN_ID,
            f"üìå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{cb.from_user.username or cb.from_user.id}\nüìÖ –î–∞—Ç–∞: {date_str}\n‚è∞ –í—Ä–µ–º—è: {time_str}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

@dp.callback_query(F.data == "cancel")
async def cancel(cb: CallbackQuery):
    await cb.message.edit_text("‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())
    await cb.answer("–û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ–Ω—É –≤ Excel
    save_booking("-", "-", cb.from_user, status="–û—Ç–º–µ–Ω–∏–ª")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    try:
        await bot.send_message(
            ADMIN_ID,
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{cb.from_user.username or cb.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å."
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

# --- –ó–ê–ü–£–°–ö ---
async def main():
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
